WITH ENVIOS AS (SELECT
	ROW_NUMBER() OVER(ORDER BY A.ORDER_ID ASC) AS #,
	A.ORDER_ID,
	CUSTOMER_ID,
	PIZZA_ID,
	CASE WHEN PIZZA_ID = 1 THEN 12 WHEN PIZZA_ID = 2 THEN 10 ELSE NULL END AS PRECIO_PIZZA,
	CASE WHEN EXTRAS = 'NULL' OR EXTRAS IS NULL THEN '' ELSE EXTRAS END AS EXTRAS,
	CAST(LEFT(DISTANCE,PATINDEX('%[^0-9-.]%', DISTANCE + ' ') - 1) AS FLOAT) AS DISTANCE,
	CASE WHEN CANCELLATION LIKE '%CANCELL%' THEN 1 ELSE 0 END AS CANCELADO
FROM CASE02.CUSTOMER_ORDERS A
JOIN CASE02.RUNNER_ORDERS B ON A.ORDER_ID=B.ORDER_ID),

ENVIOS_V2 AS (
SELECT
		#,
		ORDER_ID,
		CUSTOMER_ID,
		PIZZA_ID,
		PRECIO_PIZZA,
		EXTRAS,
		VALUE AS DIV_EXTRAS,
		DISTANCE * 0.3 AS COSTE_RUNNER
FROM ENVIOS
CROSS APPLY STRING_SPLIT(EXTRAS, ',')
WHERE CANCELADO = 0),


GASTOS AS (SELECT
	#,
	ORDER_ID,
	CUSTOMER_ID,
	PRECIO_PIZZA AS INGRESO_PIZZA,
	COSTE_RUNNER,
	EXTRAS,
	COUNT(DISTINCT CASE WHEN EXTRAS <> '' THEN DIV_EXTRAS ELSE NULL END) AS INGRESO_EXTRAS,
	COUNT(ORDER_ID) OVER(PARTITION BY ORDER_ID) AS NUM_PIZZA_POR_PEDIDO
FROM ENVIOS_V2
GROUP BY #,
	ORDER_ID,
	CUSTOMER_ID,
	PRECIO_PIZZA,
	EXTRAS,
	COSTE_RUNNER)

SELECT 
	SUM(INGRESO_PIZZA) AS INGRESO_PIZZA,
	SUM(INGRESO_EXTRAS) AS INGRESO_EXTRAS,
	SUM(COSTE_RUNNER/NUM_PIZZA_POR_PEDIDO) AS COSTE_RUNNER
FROM GASTOS;
