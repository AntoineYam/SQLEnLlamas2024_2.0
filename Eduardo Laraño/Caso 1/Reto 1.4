----- Primera opción. Creando subconsulta con funcion RANK. -----

SELECT 
  AUX_RANK.PRODUCTO,
  AUX_RANK.VECES_PEDIDO
FROM
    (SELECT
         M.PRODUCT_NAME PRODUCTO,
         COUNT(S.PRODUCT_ID) VECES_PEDIDO,
         RANK() OVER (PARTITION BY NULL ORDER BY COUNT(S.PRODUCT_ID) DESC) AS RANKING
     FROM CASE01.MENU M
     JOIN CASE01.SALES S
         ON M.PRODUCT_ID = S.PRODUCT_ID
     GROUP BY M.PRODUCT_NAME) AUX_RANK
WHERE AUX_RANK.RANKING = 1;

----- Segunda opción. Empleando función TOP() -----

SELECT TOP (1)
  M.PRODUCT_NAME PRODUCTO,
  COUNT(S.PRODUCT_ID) VECES_PEDIDO
FROM CASE01.MENU M
JOIN CASE01.SALES S
  ON M.PRODUCT_ID = S.PRODUCT_ID
GROUP BY M.PRODUCT_NAME
ORDER BY VECES_PEDIDO DESC;


/*********************************************************/
/***************** COMENTARIO BEA *********************/
/*********************************************************/
/*

Resultado correcto, enhorabuena Edu!

Resultado: OK
Código: En este caso la opción más correcta es la opción 1 usando RANK, ya que de esta forma se identifican los empates; sin embargo, con la opción TOP solo nos quedamos con el primer resultado y no sabemos si hay empates o no entre productos más pedidos.
Legibilidad: OK. 

Me ha gustado mucho que has mejorado la legibilidad jeje

*/
